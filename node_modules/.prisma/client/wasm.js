
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  password: 'password',
  role: 'role',
  kycStatus: 'kycStatus',
  wallet: 'wallet',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionGroupScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  serviceName: 'serviceName',
  plan: 'plan',
  pricePerSlot: 'pricePerSlot',
  totalSlots: 'totalSlots',
  availableSlots: 'availableSlots',
  createdAt: 'createdAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  subscriptionGroupId: 'subscriptionGroupId',
  buyerId: 'buyerId',
  ownerId: 'ownerId',
  amount: 'amount',
  commission: 'commission',
  status: 'status',
  buyerWhatsApp: 'buyerWhatsApp',
  buyerWhatsAppLink: 'buyerWhatsAppLink',
  paymentProviderId: 'paymentProviderId',
  paymentId: 'paymentId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  OWNER: 'OWNER',
  BUYER: 'BUYER'
};

exports.KYCStatus = exports.$Enums.KYCStatus = {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  CONFIRMED: 'CONFIRMED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT',
  REFUND: 'REFUND',
  COMMISSION: 'COMMISSION'
};

exports.Prisma.ModelName = {
  User: 'User',
  SubscriptionGroup: 'SubscriptionGroup',
  Order: 'Order',
  Transaction: 'Transaction'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Volumes/Disc2/spyflix/backend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Volumes/Disc2/spyflix/backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id            String              @id @default(uuid())\n  name          String\n  email         String              @unique\n  phone         String\n  password      String\n  role          Role\n  kycStatus     KYCStatus           @default(PENDING)\n  wallet        Float               @default(0)\n  createdAt     DateTime            @default(now())\n  subscriptions SubscriptionGroup[] @relation(\"ownerGroups\")\n  orders        Order[]             @relation(\"buyerOrders\")\n  ownerOrders   Order[]             @relation(\"ownerOrders\")\n  transactions  Transaction[]\n}\n\nenum Role {\n  OWNER\n  BUYER\n}\n\nenum KYCStatus {\n  PENDING\n  VERIFIED\n  REJECTED\n}\n\nmodel SubscriptionGroup {\n  id             String   @id @default(uuid())\n  ownerId        String\n  owner          User     @relation(fields: [ownerId], references: [id], name: \"ownerGroups\")\n  serviceName    String\n  plan           String\n  pricePerSlot   Float\n  totalSlots     Int\n  availableSlots Int\n  createdAt      DateTime @default(now())\n  orders         Order[]\n}\n\nmodel Order {\n  id                  String            @id @default(uuid())\n  subscriptionGroupId String\n  subscriptionGroup   SubscriptionGroup @relation(fields: [subscriptionGroupId], references: [id])\n  buyerId             String\n  buyer               User              @relation(fields: [buyerId], references: [id], name: \"buyerOrders\")\n  ownerId             String\n  owner               User              @relation(fields: [ownerId], references: [id], name: \"ownerOrders\")\n  amount              Float\n  commission          Float             @default(0)\n  status              OrderStatus       @default(PENDING)\n  buyerWhatsApp       String?\n  buyerWhatsAppLink   String?\n  paymentProviderId   String?\n  paymentId           String?\n  expiresAt           DateTime\n  createdAt           DateTime          @default(now())\n  updatedAt           DateTime          @updatedAt\n  Transaction         Transaction[]\n\n  @@index([status, expiresAt])\n}\n\nenum OrderStatus {\n  PENDING\n  PAID\n  CONFIRMED\n  REFUNDED\n  CANCELLED\n}\n\nmodel Transaction {\n  id        String          @id @default(uuid())\n  orderId   String?\n  order     Order?          @relation(fields: [orderId], references: [id])\n  userId    String\n  user      User            @relation(fields: [userId], references: [id])\n  type      TransactionType\n  amount    Float\n  metadata  Json?\n  createdAt DateTime        @default(now())\n}\n\nenum TransactionType {\n  CREDIT\n  DEBIT\n  REFUND\n  COMMISSION\n}\n",
  "inlineSchemaHash": "849315f2af04521654d79c9c74ac820e7a896df87ced70826cb17510c4cbbc80",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"kycStatus\",\"kind\":\"enum\",\"type\":\"KYCStatus\"},{\"name\":\"wallet\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"subscriptions\",\"kind\":\"object\",\"type\":\"SubscriptionGroup\",\"relationName\":\"ownerGroups\"},{\"name\":\"orders\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"buyerOrders\"},{\"name\":\"ownerOrders\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"ownerOrders\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TransactionToUser\"}],\"dbName\":null},\"SubscriptionGroup\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ownerGroups\"},{\"name\":\"serviceName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"plan\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pricePerSlot\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalSlots\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"availableSlots\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"orders\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToSubscriptionGroup\"}],\"dbName\":null},\"Order\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subscriptionGroupId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subscriptionGroup\",\"kind\":\"object\",\"type\":\"SubscriptionGroup\",\"relationName\":\"OrderToSubscriptionGroup\"},{\"name\":\"buyerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"buyer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"buyerOrders\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ownerOrders\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"commission\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"OrderStatus\"},{\"name\":\"buyerWhatsApp\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"buyerWhatsAppLink\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paymentProviderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Transaction\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"OrderToTransaction\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToTransaction\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TransactionToUser\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TransactionType\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

